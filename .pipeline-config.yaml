version: '1'

setup:
  abort_on_failure: true
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.15
  script: |
    #!/usr/bin/env bash
  
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    echo "set up completed"

test:
  abort_on_failure: true
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.15
  script: |
    #!/usr/bin/env bash
    cd ../"$(load_repo app-repo path)"
    npm ci

    # save exit code for old evidence collection
    exit_code=0
    npm test || exit_code=$?
    
    # save status for new evidence collection
    status="success"
    if [ "$exit_code" != "0" ]; then
      status="failure"
    fi

    collect-evidence \
      --tool-type "jest" \
      --status "$status" \
      --evidence-type "com.ibm.unit_tests" \
      --asset-type "repo" \
      --asset-key "app-repo"
    exit $exit_code


containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.15
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi


deploy:
  abort_on_failure: true
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.15
  script: |
    #!/usr/bin/env bash
    
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/deploy.sh


release:
  abort_on_failure: true
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.15
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    export APP_REPO="$(cat /config/repository-url)"
    APP_REPO_NAME=${APP_REPO##*/}
    INVENTORY_REPO="$(cat /config/inventory-url)"
    GHE_ORG=${INVENTORY_REPO%/*}
    GHE_REPO=${INVENTORY_REPO##*/}

    export TYPE="image"
    export SHA_VAL="$(get_env sha-val)"
    export ARTIFACT_PROVENANCE="$(get_env artifact-provenance)"
    export APP_REPO_NAME=${APP_REPO_NAME%.git}
    export GHE_ORG=${GHE_ORG##*/}
    export GHE_REPO=${GHE_REPO%.git}
    export SIGNATURE="$(cat /config/signature)"
    export VERSION="$(cat /config/version)"
    export GIT_COMMIT="$(cat /config/git-commit)"
    export BUILD_IMAGE_TAG="$(get_env build-image-tag)"
    export IMAGE_NAME="$(cat /config/imageName)"
    export COMMIT_BRANCH="$(cat /config/git-branch)"

    source scripts/release.sh

